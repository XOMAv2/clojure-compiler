//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Clojure.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClojureCompiler.Generated
{
    using Antlr4.Runtime.Misc;
    using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
    using IToken = Antlr4.Runtime.IToken;

    /// <summary>
    /// This interface defines a complete listener for a parse tree produced by
    /// <see cref="ClojureParser"/>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
    [System.CLSCompliant(false)]
    public interface IClojureListener : IParseTreeListener
    {
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.file"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterFile([NotNull] ClojureParser.FileContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.file"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitFile([NotNull] ClojureParser.FileContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.form"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterForm([NotNull] ClojureParser.FormContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.form"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitForm([NotNull] ClojureParser.FormContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.forms"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterForms([NotNull] ClojureParser.FormsContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.forms"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitForms([NotNull] ClojureParser.FormsContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.list"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterList([NotNull] ClojureParser.ListContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.list"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitList([NotNull] ClojureParser.ListContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.vector"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterVector([NotNull] ClojureParser.VectorContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.vector"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitVector([NotNull] ClojureParser.VectorContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.map"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterMap([NotNull] ClojureParser.MapContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.map"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitMap([NotNull] ClojureParser.MapContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.set"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterSet([NotNull] ClojureParser.SetContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.set"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitSet([NotNull] ClojureParser.SetContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.reader_macro"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterReader_macro([NotNull] ClojureParser.Reader_macroContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.reader_macro"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitReader_macro([NotNull] ClojureParser.Reader_macroContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterQuote([NotNull] ClojureParser.QuoteContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitQuote([NotNull] ClojureParser.QuoteContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.backtick"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterBacktick([NotNull] ClojureParser.BacktickContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.backtick"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitBacktick([NotNull] ClojureParser.BacktickContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.unquote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterUnquote([NotNull] ClojureParser.UnquoteContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.unquote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitUnquote([NotNull] ClojureParser.UnquoteContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.unquote_splicing"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterUnquote_splicing([NotNull] ClojureParser.Unquote_splicingContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.unquote_splicing"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitUnquote_splicing([NotNull] ClojureParser.Unquote_splicingContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.tag"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterTag([NotNull] ClojureParser.TagContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.tag"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitTag([NotNull] ClojureParser.TagContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.deref"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterDeref([NotNull] ClojureParser.DerefContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.deref"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitDeref([NotNull] ClojureParser.DerefContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.gensym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterGensym([NotNull] ClojureParser.GensymContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.gensym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitGensym([NotNull] ClojureParser.GensymContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.lambda"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterLambda([NotNull] ClojureParser.LambdaContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.lambda"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitLambda([NotNull] ClojureParser.LambdaContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.meta_data"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterMeta_data([NotNull] ClojureParser.Meta_dataContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.meta_data"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitMeta_data([NotNull] ClojureParser.Meta_dataContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.var_quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterVar_quote([NotNull] ClojureParser.Var_quoteContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.var_quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitVar_quote([NotNull] ClojureParser.Var_quoteContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.host_expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterHost_expr([NotNull] ClojureParser.Host_exprContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.host_expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitHost_expr([NotNull] ClojureParser.Host_exprContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.discard"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterDiscard([NotNull] ClojureParser.DiscardContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.discard"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitDiscard([NotNull] ClojureParser.DiscardContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.dispatch"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterDispatch([NotNull] ClojureParser.DispatchContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.dispatch"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitDispatch([NotNull] ClojureParser.DispatchContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.regex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterRegex([NotNull] ClojureParser.RegexContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.regex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitRegex([NotNull] ClojureParser.RegexContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.literal"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterLiteral([NotNull] ClojureParser.LiteralContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.literal"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitLiteral([NotNull] ClojureParser.LiteralContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.boolean"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterBoolean([NotNull] ClojureParser.BooleanContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.boolean"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitBoolean([NotNull] ClojureParser.BooleanContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.string"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterString([NotNull] ClojureParser.StringContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.string"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitString([NotNull] ClojureParser.StringContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.hex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterHex([NotNull] ClojureParser.HexContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.hex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitHex([NotNull] ClojureParser.HexContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.bin"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterBin([NotNull] ClojureParser.BinContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.bin"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitBin([NotNull] ClojureParser.BinContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.bign"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterBign([NotNull] ClojureParser.BignContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.bign"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitBign([NotNull] ClojureParser.BignContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.number"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNumber([NotNull] ClojureParser.NumberContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.number"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNumber([NotNull] ClojureParser.NumberContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.character"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterCharacter([NotNull] ClojureParser.CharacterContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.character"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitCharacter([NotNull] ClojureParser.CharacterContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.named_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNamed_char([NotNull] ClojureParser.Named_charContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.named_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNamed_char([NotNull] ClojureParser.Named_charContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.any_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterAny_char([NotNull] ClojureParser.Any_charContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.any_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitAny_char([NotNull] ClojureParser.Any_charContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.u_hex_quad"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterU_hex_quad([NotNull] ClojureParser.U_hex_quadContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.u_hex_quad"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitU_hex_quad([NotNull] ClojureParser.U_hex_quadContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.nil"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNil([NotNull] ClojureParser.NilContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.nil"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNil([NotNull] ClojureParser.NilContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterKeyword([NotNull] ClojureParser.KeywordContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitKeyword([NotNull] ClojureParser.KeywordContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.simple_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterSimple_keyword([NotNull] ClojureParser.Simple_keywordContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.simple_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitSimple_keyword([NotNull] ClojureParser.Simple_keywordContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.macro_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterMacro_keyword([NotNull] ClojureParser.Macro_keywordContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.macro_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitMacro_keyword([NotNull] ClojureParser.Macro_keywordContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterSymbol([NotNull] ClojureParser.SymbolContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitSymbol([NotNull] ClojureParser.SymbolContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.simple_sym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterSimple_sym([NotNull] ClojureParser.Simple_symContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.simple_sym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitSimple_sym([NotNull] ClojureParser.Simple_symContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.ns_symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterNs_symbol([NotNull] ClojureParser.Ns_symbolContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.ns_symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitNs_symbol([NotNull] ClojureParser.Ns_symbolContext context);
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.param_name"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void EnterParam_name([NotNull] ClojureParser.Param_nameContext context);
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.param_name"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        void ExitParam_name([NotNull] ClojureParser.Param_nameContext context);
    }
} // namespace ClojureCompiler.Generated
