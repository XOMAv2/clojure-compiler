//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Clojure.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClojureCompiler.Generated
{
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using IToken = Antlr4.Runtime.IToken;

    /// <summary>
    /// This interface defines a complete generic visitor for a parse tree produced
    /// by <see cref="ClojureParser"/>.
    /// </summary>
    /// <typeparam name="Result">The return type of the visit operation.</typeparam>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
    [System.CLSCompliant(false)]
    public interface IClojureVisitor<Result> : IParseTreeVisitor<Result>
    {
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.file"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitFile([NotNull] ClojureParser.FileContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.form"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitForm([NotNull] ClojureParser.FormContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.forms"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitForms([NotNull] ClojureParser.FormsContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.list"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitList([NotNull] ClojureParser.ListContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.vector"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitVector([NotNull] ClojureParser.VectorContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.map"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitMap([NotNull] ClojureParser.MapContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.set"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitSet([NotNull] ClojureParser.SetContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.reader_macro"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitReader_macro([NotNull] ClojureParser.Reader_macroContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitQuote([NotNull] ClojureParser.QuoteContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.backtick"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitBacktick([NotNull] ClojureParser.BacktickContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.unquote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitUnquote([NotNull] ClojureParser.UnquoteContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.unquote_splicing"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitUnquote_splicing([NotNull] ClojureParser.Unquote_splicingContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.tag"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitTag([NotNull] ClojureParser.TagContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.deref"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitDeref([NotNull] ClojureParser.DerefContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.gensym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitGensym([NotNull] ClojureParser.GensymContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.lambda"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitLambda([NotNull] ClojureParser.LambdaContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.meta_data"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitMeta_data([NotNull] ClojureParser.Meta_dataContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.var_quote"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitVar_quote([NotNull] ClojureParser.Var_quoteContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.host_expr"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitHost_expr([NotNull] ClojureParser.Host_exprContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.discard"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitDiscard([NotNull] ClojureParser.DiscardContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.dispatch"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitDispatch([NotNull] ClojureParser.DispatchContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.regex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitRegex([NotNull] ClojureParser.RegexContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.literal"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitLiteral([NotNull] ClojureParser.LiteralContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.boolean"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitBoolean([NotNull] ClojureParser.BooleanContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.string"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitString([NotNull] ClojureParser.StringContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.hex"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitHex([NotNull] ClojureParser.HexContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.bin"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitBin([NotNull] ClojureParser.BinContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.bign"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitBign([NotNull] ClojureParser.BignContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.number"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitNumber([NotNull] ClojureParser.NumberContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.character"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitCharacter([NotNull] ClojureParser.CharacterContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.named_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitNamed_char([NotNull] ClojureParser.Named_charContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.any_char"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitAny_char([NotNull] ClojureParser.Any_charContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.u_hex_quad"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitU_hex_quad([NotNull] ClojureParser.U_hex_quadContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.nil"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitNil([NotNull] ClojureParser.NilContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitKeyword([NotNull] ClojureParser.KeywordContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.simple_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitSimple_keyword([NotNull] ClojureParser.Simple_keywordContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.macro_keyword"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitMacro_keyword([NotNull] ClojureParser.Macro_keywordContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitSymbol([NotNull] ClojureParser.SymbolContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.simple_sym"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitSimple_sym([NotNull] ClojureParser.Simple_symContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.ns_symbol"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitNs_symbol([NotNull] ClojureParser.Ns_symbolContext context);
        /// <summary>
        /// Visit a parse tree produced by <see cref="ClojureParser.param_name"/>.
        /// </summary>
        /// <param name="context">The parse tree.</param>
        /// <return>The visitor result.</return>
        Result VisitParam_name([NotNull] ClojureParser.Param_nameContext context);
    }
} // namespace ClojureCompiler.Generated
