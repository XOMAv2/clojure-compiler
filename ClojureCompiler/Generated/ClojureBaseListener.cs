//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Clojure.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ClojureCompiler.Generated
{
    using Antlr4.Runtime.Misc;
    using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
    using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
    using IToken = Antlr4.Runtime.IToken;
    using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

    /// <summary>
    /// This class provides an empty implementation of <see cref="IClojureListener"/>,
    /// which can be extended to create a listener which only needs to handle a subset
    /// of the available methods.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
    [System.Diagnostics.DebuggerNonUserCode]
    [System.CLSCompliant(false)]
    public partial class ClojureBaseListener : IClojureListener
    {
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.file"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterFile([NotNull] ClojureParser.FileContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.file"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitFile([NotNull] ClojureParser.FileContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.form"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterForm([NotNull] ClojureParser.FormContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.form"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitForm([NotNull] ClojureParser.FormContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.forms"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterForms([NotNull] ClojureParser.FormsContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.forms"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitForms([NotNull] ClojureParser.FormsContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.list"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterList([NotNull] ClojureParser.ListContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.list"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitList([NotNull] ClojureParser.ListContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.vector"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterVector([NotNull] ClojureParser.VectorContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.vector"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitVector([NotNull] ClojureParser.VectorContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.map"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterMap([NotNull] ClojureParser.MapContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.map"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitMap([NotNull] ClojureParser.MapContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.set"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterSet([NotNull] ClojureParser.SetContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.set"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitSet([NotNull] ClojureParser.SetContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.reader_macro"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterReader_macro([NotNull] ClojureParser.Reader_macroContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.reader_macro"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitReader_macro([NotNull] ClojureParser.Reader_macroContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.quote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterQuote([NotNull] ClojureParser.QuoteContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.quote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitQuote([NotNull] ClojureParser.QuoteContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.backtick"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterBacktick([NotNull] ClojureParser.BacktickContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.backtick"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitBacktick([NotNull] ClojureParser.BacktickContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.unquote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterUnquote([NotNull] ClojureParser.UnquoteContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.unquote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitUnquote([NotNull] ClojureParser.UnquoteContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.unquote_splicing"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterUnquote_splicing([NotNull] ClojureParser.Unquote_splicingContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.unquote_splicing"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitUnquote_splicing([NotNull] ClojureParser.Unquote_splicingContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.tag"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterTag([NotNull] ClojureParser.TagContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.tag"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitTag([NotNull] ClojureParser.TagContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.deref"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterDeref([NotNull] ClojureParser.DerefContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.deref"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitDeref([NotNull] ClojureParser.DerefContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.gensym"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterGensym([NotNull] ClojureParser.GensymContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.gensym"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitGensym([NotNull] ClojureParser.GensymContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.lambda"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterLambda([NotNull] ClojureParser.LambdaContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.lambda"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitLambda([NotNull] ClojureParser.LambdaContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.meta_data"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterMeta_data([NotNull] ClojureParser.Meta_dataContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.meta_data"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitMeta_data([NotNull] ClojureParser.Meta_dataContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.var_quote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterVar_quote([NotNull] ClojureParser.Var_quoteContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.var_quote"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitVar_quote([NotNull] ClojureParser.Var_quoteContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.host_expr"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterHost_expr([NotNull] ClojureParser.Host_exprContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.host_expr"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitHost_expr([NotNull] ClojureParser.Host_exprContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.discard"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterDiscard([NotNull] ClojureParser.DiscardContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.discard"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitDiscard([NotNull] ClojureParser.DiscardContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.dispatch"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterDispatch([NotNull] ClojureParser.DispatchContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.dispatch"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitDispatch([NotNull] ClojureParser.DispatchContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.regex"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterRegex([NotNull] ClojureParser.RegexContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.regex"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitRegex([NotNull] ClojureParser.RegexContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.literal"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterLiteral([NotNull] ClojureParser.LiteralContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.literal"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitLiteral([NotNull] ClojureParser.LiteralContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.boolean"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterBoolean([NotNull] ClojureParser.BooleanContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.boolean"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitBoolean([NotNull] ClojureParser.BooleanContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.string"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterString([NotNull] ClojureParser.StringContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.string"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitString([NotNull] ClojureParser.StringContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.hex"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterHex([NotNull] ClojureParser.HexContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.hex"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitHex([NotNull] ClojureParser.HexContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.bin"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterBin([NotNull] ClojureParser.BinContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.bin"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitBin([NotNull] ClojureParser.BinContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.bign"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterBign([NotNull] ClojureParser.BignContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.bign"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitBign([NotNull] ClojureParser.BignContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.number"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterNumber([NotNull] ClojureParser.NumberContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.number"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitNumber([NotNull] ClojureParser.NumberContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.character"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterCharacter([NotNull] ClojureParser.CharacterContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.character"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitCharacter([NotNull] ClojureParser.CharacterContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.named_char"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterNamed_char([NotNull] ClojureParser.Named_charContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.named_char"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitNamed_char([NotNull] ClojureParser.Named_charContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.any_char"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterAny_char([NotNull] ClojureParser.Any_charContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.any_char"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitAny_char([NotNull] ClojureParser.Any_charContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.u_hex_quad"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterU_hex_quad([NotNull] ClojureParser.U_hex_quadContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.u_hex_quad"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitU_hex_quad([NotNull] ClojureParser.U_hex_quadContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.nil"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterNil([NotNull] ClojureParser.NilContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.nil"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitNil([NotNull] ClojureParser.NilContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterKeyword([NotNull] ClojureParser.KeywordContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitKeyword([NotNull] ClojureParser.KeywordContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.simple_keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterSimple_keyword([NotNull] ClojureParser.Simple_keywordContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.simple_keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitSimple_keyword([NotNull] ClojureParser.Simple_keywordContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.macro_keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterMacro_keyword([NotNull] ClojureParser.Macro_keywordContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.macro_keyword"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitMacro_keyword([NotNull] ClojureParser.Macro_keywordContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.symbol"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterSymbol([NotNull] ClojureParser.SymbolContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.symbol"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitSymbol([NotNull] ClojureParser.SymbolContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.simple_sym"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterSimple_sym([NotNull] ClojureParser.Simple_symContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.simple_sym"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitSimple_sym([NotNull] ClojureParser.Simple_symContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.ns_symbol"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterNs_symbol([NotNull] ClojureParser.Ns_symbolContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.ns_symbol"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitNs_symbol([NotNull] ClojureParser.Ns_symbolContext context) { }
        /// <summary>
        /// Enter a parse tree produced by <see cref="ClojureParser.param_name"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void EnterParam_name([NotNull] ClojureParser.Param_nameContext context) { }
        /// <summary>
        /// Exit a parse tree produced by <see cref="ClojureParser.param_name"/>.
        /// <para>The default implementation does nothing.</para>
        /// </summary>
        /// <param name="context">The parse tree.</param>
        public virtual void ExitParam_name([NotNull] ClojureParser.Param_nameContext context) { }

        /// <inheritdoc/>
        /// <remarks>The default implementation does nothing.</remarks>
        public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
        /// <inheritdoc/>
        /// <remarks>The default implementation does nothing.</remarks>
        public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
        /// <inheritdoc/>
        /// <remarks>The default implementation does nothing.</remarks>
        public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
        /// <inheritdoc/>
        /// <remarks>The default implementation does nothing.</remarks>
        public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
    }
} // namespace ClojureCompiler.Generated
