//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/daria/develop/uni/clojure-compiler/lexer/lexer/Grammar/Clojure.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class ClojureParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, STRING=21, FLOAT=22, HEX=23, BIN=24, LONG=25, 
		BIGN=26, CHAR_U=27, CHAR_NAMED=28, CHAR_ANY=29, NIL=30, BOOLEAN=31, SYMBOL=32, 
		NS_SYMBOL=33, PARAM_NAME=34, TRASH=35;
	public const int
		RULE_file = 0, RULE_form = 1, RULE_forms = 2, RULE_list = 3, RULE_vector = 4, 
		RULE_map = 5, RULE_set = 6, RULE_reader_macro = 7, RULE_quote = 8, RULE_backtick = 9, 
		RULE_unquote = 10, RULE_unquote_splicing = 11, RULE_tag = 12, RULE_deref = 13, 
		RULE_gensym = 14, RULE_lambda = 15, RULE_meta_data = 16, RULE_var_quote = 17, 
		RULE_host_expr = 18, RULE_discard = 19, RULE_dispatch = 20, RULE_regex = 21, 
		RULE_literal = 22, RULE_string = 23, RULE_hex = 24, RULE_bin = 25, RULE_bign = 26, 
		RULE_number = 27, RULE_character = 28, RULE_named_char = 29, RULE_any_char = 30, 
		RULE_u_hex_quad = 31, RULE_nil = 32, RULE_keyword = 33, RULE_simple_keyword = 34, 
		RULE_macro_keyword = 35, RULE_symbol = 36, RULE_simple_sym = 37, RULE_ns_symbol = 38, 
		RULE_param_name = 39;
	public static readonly string[] ruleNames = {
		"file", "form", "forms", "list", "vector", "map", "set", "reader_macro", 
		"quote", "backtick", "unquote", "unquote_splicing", "tag", "deref", "gensym", 
		"lambda", "meta_data", "var_quote", "host_expr", "discard", "dispatch", 
		"regex", "literal", "string", "hex", "bin", "bign", "number", "character", 
		"named_char", "any_char", "u_hex_quad", "nil", "keyword", "simple_keyword", 
		"macro_keyword", "symbol", "simple_sym", "ns_symbol", "param_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'#{'", "'''", "'`'", 
		"'~'", "'~@'", "'^'", "'@'", "'#'", "'#('", "'#^'", "'#''", "'#+'", "'#_'", 
		"':'", null, null, null, null, null, null, null, null, null, "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "STRING", "FLOAT", 
		"HEX", "BIN", "LONG", "BIGN", "CHAR_U", "CHAR_NAMED", "CHAR_ANY", "NIL", 
		"BOOLEAN", "SYMBOL", "NS_SYMBOL", "PARAM_NAME", "TRASH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Clojure.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ClojureParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ClojureParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ClojureParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ClojureParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << STRING) | (1L << FLOAT) | (1L << HEX) | (1L << BIN) | (1L << LONG) | (1L << BIGN) | (1L << CHAR_U) | (1L << CHAR_NAMED) | (1L << CHAR_ANY) | (1L << NIL) | (1L << BOOLEAN) | (1L << SYMBOL) | (1L << NS_SYMBOL) | (1L << PARAM_NAME))) != 0)) {
				{
				{
				State = 80;
				form();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorContext vector() {
			return GetRuleContext<VectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Reader_macroContext reader_macro() {
			return GetRuleContext<Reader_macroContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitForm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(Context, State);
		EnterRule(_localctx, 2, RULE_form);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				list();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				vector();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				map();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				reader_macro();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public FormsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterForms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitForms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormsContext forms() {
		FormsContext _localctx = new FormsContext(Context, State);
		EnterRule(_localctx, 4, RULE_forms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << STRING) | (1L << FLOAT) | (1L << HEX) | (1L << BIN) | (1L << LONG) | (1L << BIGN) | (1L << CHAR_U) | (1L << CHAR_NAMED) | (1L << CHAR_ANY) | (1L << NIL) | (1L << BOOLEAN) | (1L << SYMBOL) | (1L << NS_SYMBOL) | (1L << PARAM_NAME))) != 0)) {
				{
				{
				State = 95;
				form();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormsContext forms() {
			return GetRuleContext<FormsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 6, RULE_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__0);
			State = 102;
			forms();
			State = 103;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormsContext forms() {
			return GetRuleContext<FormsContext>(0);
		}
		public VectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorContext vector() {
		VectorContext _localctx = new VectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_vector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__2);
			State = 106;
			forms();
			State = 107;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 10, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__4);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << STRING) | (1L << FLOAT) | (1L << HEX) | (1L << BIN) | (1L << LONG) | (1L << BIGN) | (1L << CHAR_U) | (1L << CHAR_NAMED) | (1L << CHAR_ANY) | (1L << NIL) | (1L << BOOLEAN) | (1L << SYMBOL) | (1L << NS_SYMBOL) | (1L << PARAM_NAME))) != 0)) {
				{
				{
				State = 110;
				form();
				State = 111;
				form();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormsContext forms() {
			return GetRuleContext<FormsContext>(0);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 12, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(T__6);
			State = 121;
			forms();
			State = 122;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reader_macroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_dataContext meta_data() {
			return GetRuleContext<Meta_dataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_quoteContext var_quote() {
			return GetRuleContext<Var_quoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Host_exprContext host_expr() {
			return GetRuleContext<Host_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagContext tag() {
			return GetRuleContext<TagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardContext discard() {
			return GetRuleContext<DiscardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DispatchContext dispatch() {
			return GetRuleContext<DispatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerefContext deref() {
			return GetRuleContext<DerefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuoteContext quote() {
			return GetRuleContext<QuoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BacktickContext backtick() {
			return GetRuleContext<BacktickContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnquoteContext unquote() {
			return GetRuleContext<UnquoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unquote_splicingContext unquote_splicing() {
			return GetRuleContext<Unquote_splicingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GensymContext gensym() {
			return GetRuleContext<GensymContext>(0);
		}
		public Reader_macroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reader_macro; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterReader_macro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitReader_macro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReader_macro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reader_macroContext reader_macro() {
		Reader_macroContext _localctx = new Reader_macroContext(Context, State);
		EnterRule(_localctx, 14, RULE_reader_macro);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				lambda();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				meta_data();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				regex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 127;
				var_quote();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 128;
				host_expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 129;
				set();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 130;
				tag();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 131;
				discard();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 132;
				dispatch();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 133;
				deref();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 134;
				quote();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 135;
				backtick();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 136;
				unquote();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 137;
				unquote_splicing();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 138;
				gensym();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public QuoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitQuote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuoteContext quote() {
		QuoteContext _localctx = new QuoteContext(Context, State);
		EnterRule(_localctx, 16, RULE_quote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__7);
			State = 142;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BacktickContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public BacktickContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_backtick; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterBacktick(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitBacktick(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBacktick(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BacktickContext backtick() {
		BacktickContext _localctx = new BacktickContext(Context, State);
		EnterRule(_localctx, 18, RULE_backtick);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__8);
			State = 145;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public UnquoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterUnquote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitUnquote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquoteContext unquote() {
		UnquoteContext _localctx = new UnquoteContext(Context, State);
		EnterRule(_localctx, 20, RULE_unquote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(T__9);
			State = 148;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unquote_splicingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public Unquote_splicingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquote_splicing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterUnquote_splicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitUnquote_splicing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquote_splicing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unquote_splicingContext unquote_splicing() {
		Unquote_splicingContext _localctx = new Unquote_splicingContext(Context, State);
		EnterRule(_localctx, 22, RULE_unquote_splicing);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(T__10);
			State = 151;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 24, RULE_tag);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__11);
			State = 154;
			form();
			State = 155;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public DerefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterDeref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitDeref(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DerefContext deref() {
		DerefContext _localctx = new DerefContext(Context, State);
		EnterRule(_localctx, 26, RULE_deref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(T__12);
			State = 158;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GensymContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(ClojureParser.SYMBOL, 0); }
		public GensymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gensym; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterGensym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitGensym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGensym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GensymContext gensym() {
		GensymContext _localctx = new GensymContext(Context, State);
		EnterRule(_localctx, 28, RULE_gensym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(SYMBOL);
			State = 161;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 30, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(T__14);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << STRING) | (1L << FLOAT) | (1L << HEX) | (1L << BIN) | (1L << LONG) | (1L << BIGN) | (1L << CHAR_U) | (1L << CHAR_NAMED) | (1L << CHAR_ANY) | (1L << NIL) | (1L << BOOLEAN) | (1L << SYMBOL) | (1L << NS_SYMBOL) | (1L << PARAM_NAME))) != 0)) {
				{
				{
				State = 164;
				form();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_dataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public Meta_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_data; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterMeta_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitMeta_data(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_dataContext meta_data() {
		Meta_dataContext _localctx = new Meta_dataContext(Context, State);
		EnterRule(_localctx, 32, RULE_meta_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__15);
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 173;
				map();
				State = 174;
				form();
				}
				break;
			case 2:
				{
				State = 176;
				form();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_quoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public Var_quoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_quote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterVar_quote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitVar_quote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_quote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_quoteContext var_quote() {
		Var_quoteContext _localctx = new Var_quoteContext(Context, State);
		EnterRule(_localctx, 34, RULE_var_quote);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__16);
			State = 180;
			symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Host_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext[] form() {
			return GetRuleContexts<FormContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form(int i) {
			return GetRuleContext<FormContext>(i);
		}
		public Host_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_host_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterHost_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitHost_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHost_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Host_exprContext host_expr() {
		Host_exprContext _localctx = new Host_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_host_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__17);
			State = 183;
			form();
			State = 184;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public DiscardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterDiscard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitDiscard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardContext discard() {
		DiscardContext _localctx = new DiscardContext(Context, State);
		EnterRule(_localctx, 38, RULE_discard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(T__18);
			State = 187;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormContext form() {
			return GetRuleContext<FormContext>(0);
		}
		public DispatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterDispatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitDispatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDispatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DispatchContext dispatch() {
		DispatchContext _localctx = new DispatchContext(Context, State);
		EnterRule(_localctx, 40, RULE_dispatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__13);
			State = 190;
			symbol();
			State = 191;
			form();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(Context, State);
		EnterRule(_localctx, 42, RULE_regex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__13);
			State = 194;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NilContext nil() {
			return GetRuleContext<NilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ClojureParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 44, RULE_literal);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				@string();
				}
				break;
			case FLOAT:
			case HEX:
			case BIN:
			case LONG:
			case BIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				number();
				}
				break;
			case CHAR_U:
			case CHAR_NAMED:
			case CHAR_ANY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				character();
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				nil();
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				Match(BOOLEAN);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 6);
				{
				State = 201;
				keyword();
				}
				break;
			case SYMBOL:
			case NS_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 202;
				symbol();
				}
				break;
			case PARAM_NAME:
				EnterOuterAlt(_localctx, 8);
				{
				State = 203;
				param_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ClojureParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 46, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(ClojureParser.HEX, 0); }
		public HexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexContext hex() {
		HexContext _localctx = new HexContext(Context, State);
		EnterRule(_localctx, 48, RULE_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(ClojureParser.BIN, 0); }
		public BinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterBin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitBin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinContext bin() {
		BinContext _localctx = new BinContext(Context, State);
		EnterRule(_localctx, 50, RULE_bin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(BIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGN() { return GetToken(ClojureParser.BIGN, 0); }
		public BignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterBign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitBign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BignContext bign() {
		BignContext _localctx = new BignContext(Context, State);
		EnterRule(_localctx, 52, RULE_bign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(BIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ClojureParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexContext hex() {
			return GetRuleContext<HexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinContext bin() {
			return GetRuleContext<BinContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BignContext bign() {
			return GetRuleContext<BignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(ClojureParser.LONG, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 54, RULE_number);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				Match(FLOAT);
				}
				break;
			case HEX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				hex();
				}
				break;
			case BIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				bin();
				}
				break;
			case BIGN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				bign();
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 5);
				{
				State = 218;
				Match(LONG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Named_charContext named_char() {
			return GetRuleContext<Named_charContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public U_hex_quadContext u_hex_quad() {
			return GetRuleContext<U_hex_quadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_charContext any_char() {
			return GetRuleContext<Any_charContext>(0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitCharacter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 56, RULE_character);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_NAMED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				named_char();
				}
				break;
			case CHAR_U:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				u_hex_quad();
				}
				break;
			case CHAR_ANY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223;
				any_char();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_charContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_NAMED() { return GetToken(ClojureParser.CHAR_NAMED, 0); }
		public Named_charContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterNamed_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitNamed_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_char(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_charContext named_char() {
		Named_charContext _localctx = new Named_charContext(Context, State);
		EnterRule(_localctx, 58, RULE_named_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(CHAR_NAMED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_charContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_ANY() { return GetToken(ClojureParser.CHAR_ANY, 0); }
		public Any_charContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_char; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterAny_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitAny_char(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_char(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_charContext any_char() {
		Any_charContext _localctx = new Any_charContext(Context, State);
		EnterRule(_localctx, 60, RULE_any_char);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(CHAR_ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class U_hex_quadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_U() { return GetToken(ClojureParser.CHAR_U, 0); }
		public U_hex_quadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_u_hex_quad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterU_hex_quad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitU_hex_quad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitU_hex_quad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public U_hex_quadContext u_hex_quad() {
		U_hex_quadContext _localctx = new U_hex_quadContext(Context, State);
		EnterRule(_localctx, 62, RULE_u_hex_quad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(CHAR_U);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(ClojureParser.NIL, 0); }
		public NilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nil; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterNil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitNil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NilContext nil() {
		NilContext _localctx = new NilContext(Context, State);
		EnterRule(_localctx, 64, RULE_nil);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(NIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Macro_keywordContext macro_keyword() {
			return GetRuleContext<Macro_keywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_keywordContext simple_keyword() {
			return GetRuleContext<Simple_keywordContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 66, RULE_keyword);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				macro_keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				simple_keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public Simple_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterSimple_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitSimple_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_keywordContext simple_keyword() {
		Simple_keywordContext _localctx = new Simple_keywordContext(Context, State);
		EnterRule(_localctx, 68, RULE_simple_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			Match(T__19);
			State = 239;
			symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Macro_keywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public Macro_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterMacro_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitMacro_keyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_keywordContext macro_keyword() {
		Macro_keywordContext _localctx = new Macro_keywordContext(Context, State);
		EnterRule(_localctx, 70, RULE_macro_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(T__19);
			State = 242;
			Match(T__19);
			State = 243;
			symbol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ns_symbolContext ns_symbol() {
			return GetRuleContext<Ns_symbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_symContext simple_sym() {
			return GetRuleContext<Simple_symContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 72, RULE_symbol);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245;
				ns_symbol();
				}
				break;
			case SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				simple_sym();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_symContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL() { return GetToken(ClojureParser.SYMBOL, 0); }
		public Simple_symContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_sym; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterSimple_sym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitSimple_sym(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_sym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_symContext simple_sym() {
		Simple_symContext _localctx = new Simple_symContext(Context, State);
		EnterRule(_localctx, 74, RULE_simple_sym);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ns_symbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NS_SYMBOL() { return GetToken(ClojureParser.NS_SYMBOL, 0); }
		public Ns_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ns_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterNs_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitNs_symbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNs_symbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ns_symbolContext ns_symbol() {
		Ns_symbolContext _localctx = new Ns_symbolContext(Context, State);
		EnterRule(_localctx, 76, RULE_ns_symbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(NS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_NAME() { return GetToken(ClojureParser.PARAM_NAME, 0); }
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IClojureListener typedListener = listener as IClojureListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IClojureVisitor<TResult> typedVisitor = visitor as IClojureVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 78, RULE_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(PARAM_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\x102', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x3', '\x2', '\a', '\x2', 'T', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', 'W', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '`', '\n', 
		'\x3', '\x3', '\x4', '\a', '\x4', '\x63', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x66', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 't', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'w', '\v', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x8E', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xA8', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xAB', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xB4', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\xCF', '\n', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\xDE', '\n', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\xE3', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\xEF', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\xFA', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x2', '\x2', '*', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', '\x2', '\x2', '\x2', '\xFF', '\x2', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '_', '\x3', '\x2', '\x2', '\x2', '\x6', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'k', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'o', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x14', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x95', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xA5', '\x3', '\x2', '\x2', '\x2', '\"', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xB5', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '(', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xBF', '\x3', '\x2', '\x2', '\x2', ',', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x30', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x36', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\xDD', '\x3', '\x2', '\x2', '\x2', ':', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '<', '\xE4', '\x3', '\x2', '\x2', '\x2', '>', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '@', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x44', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\xF0', '\x3', '\x2', '\x2', '\x2', 'H', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', 'J', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\xFB', '\x3', '\x2', '\x2', '\x2', 'N', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\xFF', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x5', 
		'\x4', '\x3', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x2', '\x2', '\x3', 'Y', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '`', '\x5', '.', '\x18', '\x2', '[', 
		'`', '\x5', '\b', '\x5', '\x2', '\\', '`', '\x5', '\n', '\x6', '\x2', 
		']', '`', '\x5', '\f', '\a', '\x2', '^', '`', '\x5', '\x10', '\t', '\x2', 
		'_', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', '\x2', '\x2', 
		'_', '\\', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x63', '\x5', '\x4', '\x3', '\x2', '\x62', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\a', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x3', '\x2', '\x2', 'h', 
		'i', '\x5', '\x6', '\x4', '\x2', 'i', 'j', '\a', '\x4', '\x2', '\x2', 
		'j', '\t', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x5', '\x2', '\x2', 
		'l', 'm', '\x5', '\x6', '\x4', '\x2', 'm', 'n', '\a', '\x6', '\x2', '\x2', 
		'n', '\v', '\x3', '\x2', '\x2', '\x2', 'o', 'u', '\a', '\a', '\x2', '\x2', 
		'p', 'q', '\x5', '\x4', '\x3', '\x2', 'q', 'r', '\x5', '\x4', '\x3', '\x2', 
		'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'p', '\x3', '\x2', '\x2', '\x2', 
		't', 'w', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 
		'w', 'u', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\b', '\x2', '\x2', 
		'y', '\r', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\t', '\x2', '\x2', 
		'{', '|', '\x5', '\x6', '\x4', '\x2', '|', '}', '\a', '\b', '\x2', '\x2', 
		'}', '\xF', '\x3', '\x2', '\x2', '\x2', '~', '\x8E', '\x5', ' ', '\x11', 
		'\x2', '\x7F', '\x8E', '\x5', '\"', '\x12', '\x2', '\x80', '\x8E', '\x5', 
		',', '\x17', '\x2', '\x81', '\x8E', '\x5', '$', '\x13', '\x2', '\x82', 
		'\x8E', '\x5', '&', '\x14', '\x2', '\x83', '\x8E', '\x5', '\xE', '\b', 
		'\x2', '\x84', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x85', '\x8E', '\x5', 
		'(', '\x15', '\x2', '\x86', '\x8E', '\x5', '*', '\x16', '\x2', '\x87', 
		'\x8E', '\x5', '\x1C', '\xF', '\x2', '\x88', '\x8E', '\x5', '\x12', '\n', 
		'\x2', '\x89', '\x8E', '\x5', '\x14', '\v', '\x2', '\x8A', '\x8E', '\x5', 
		'\x16', '\f', '\x2', '\x8B', '\x8E', '\x5', '\x18', '\r', '\x2', '\x8C', 
		'\x8E', '\x5', '\x1E', '\x10', '\x2', '\x8D', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x81', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x84', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\n', '\x2', '\x2', '\x90', '\x91', '\x5', 
		'\x4', '\x3', '\x2', '\x91', '\x13', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\v', '\x2', '\x2', '\x93', '\x94', '\x5', '\x4', '\x3', 
		'\x2', '\x94', '\x15', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\f', '\x2', '\x2', '\x96', '\x97', '\x5', '\x4', '\x3', '\x2', '\x97', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\r', '\x2', 
		'\x2', '\x99', '\x9A', '\x5', '\x4', '\x3', '\x2', '\x9A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', '\xE', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\x4', '\x3', '\x2', '\x9D', '\x9E', '\x5', '\x4', '\x3', 
		'\x2', '\x9E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		'\xF', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\x4', '\x3', '\x2', '\xA1', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\"', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', '\x10', '\x2', '\x2', '\xA4', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA9', '\a', '\x11', '\x2', '\x2', '\xA6', 
		'\xA8', '\x5', '\x4', '\x3', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAD', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB3', '\a', '\x12', '\x2', '\x2', '\xAF', 
		'\xB0', '\x5', '\f', '\a', '\x2', '\xB0', '\xB1', '\x5', '\x4', '\x3', 
		'\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', 
		'\x4', '\x3', '\x2', '\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\a', '\x13', '\x2', '\x2', '\xB6', '\xB7', '\x5', 
		'J', '&', '\x2', '\xB7', '%', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\a', '\x14', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x4', '\x3', '\x2', 
		'\xBA', '\xBB', '\x5', '\x4', '\x3', '\x2', '\xBB', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBD', '\a', '\x15', '\x2', '\x2', '\xBD', '\xBE', 
		'\x5', '\x4', '\x3', '\x2', '\xBE', ')', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\a', '\x10', '\x2', '\x2', '\xC0', '\xC1', '\x5', 'J', '&', '\x2', 
		'\xC1', '\xC2', '\x5', '\x4', '\x3', '\x2', '\xC2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\a', '\x10', '\x2', '\x2', '\xC4', '\xC5', 
		'\x5', '\x30', '\x19', '\x2', '\xC5', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xCF', '\x5', '\x30', '\x19', '\x2', '\xC7', '\xCF', '\x5', '\x38', 
		'\x1D', '\x2', '\xC8', '\xCF', '\x5', ':', '\x1E', '\x2', '\xC9', '\xCF', 
		'\x5', '\x42', '\"', '\x2', '\xCA', '\xCF', '\a', '!', '\x2', '\x2', '\xCB', 
		'\xCF', '\x5', '\x44', '#', '\x2', '\xCC', '\xCF', '\x5', 'J', '&', '\x2', 
		'\xCD', '\xCF', '\x5', 'P', ')', '\x2', '\xCE', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '/', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD1', '\a', '\x17', '\x2', '\x2', '\xD1', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x19', '\x2', '\x2', '\xD3', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '\x1A', '\x2', '\x2', '\xD5', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x1C', '\x2', 
		'\x2', '\xD7', '\x37', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDE', '\a', 
		'\x18', '\x2', '\x2', '\xD9', '\xDE', '\x5', '\x32', '\x1A', '\x2', '\xDA', 
		'\xDE', '\x5', '\x34', '\x1B', '\x2', '\xDB', '\xDE', '\x5', '\x36', '\x1C', 
		'\x2', '\xDC', '\xDE', '\a', '\x1B', '\x2', '\x2', '\xDD', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\xDF', '\xE3', '\x5', '<', '\x1F', '\x2', '\xE0', 
		'\xE3', '\x5', '@', '!', '\x2', '\xE1', '\xE3', '\x5', '>', ' ', '\x2', 
		'\xE2', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', ';', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x1E', '\x2', '\x2', 
		'\xE5', '=', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x1F', 
		'\x2', '\x2', '\xE7', '?', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', 
		'\a', '\x1D', '\x2', '\x2', '\xE9', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\xEB', '\a', ' ', '\x2', '\x2', '\xEB', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEF', '\x5', 'H', '%', '\x2', '\xED', '\xEF', 
		'\x5', '\x46', '$', '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xF1', '\a', '\x16', '\x2', '\x2', '\xF1', '\xF2', 
		'\x5', 'J', '&', '\x2', '\xF2', 'G', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x16', '\x2', '\x2', '\xF4', '\xF5', '\a', '\x16', '\x2', 
		'\x2', '\xF5', '\xF6', '\x5', 'J', '&', '\x2', '\xF6', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xFA', '\x5', 'N', '(', '\x2', '\xF8', '\xFA', 
		'\x5', 'L', '\'', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\a', '\"', '\x2', '\x2', '\xFC', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\xFD', '\xFE', '\a', '#', '\x2', '\x2', '\xFE', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '$', '\x2', '\x2', '\x100', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\xE', 'U', '_', '\x64', 'u', '\x8D', 
		'\xA9', '\xB3', '\xCE', '\xDD', '\xE2', '\xEE', '\xF9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
